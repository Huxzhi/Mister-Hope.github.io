"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[84871],{11111:(s,n,e)=>{e.r(n),e.d(n,{default:()=>i});var a=e(16492);const t=[(0,a.uE)('<p>目前使用的系统是 WSL2。</p><p>其中以下操作可能需要在新机器上进行相同操作:</p><h2 id="windows-侧" tabindex="-1"><a class="header-anchor" href="#windows-侧" aria-hidden="true">#</a> Windows 侧</h2><p>Windows 侧可以在用户目录下创建 <code>.wslconfig</code> 文件，用于配置 WSL2。</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>[wsl2]\n# Limits VM memory in WSL 2 to 8 GB\nmemory=8GB\n</code></pre></div><h2 id="wsl-侧" tabindex="-1"><a class="header-anchor" href="#wsl-侧" aria-hidden="true">#</a> WSL 侧</h2><p>WSL 侧可以通过 <code>/etc/wsl.conf</code> 进行配置。</p><h3 id="启用-init-d-支持" tabindex="-1"><a class="header-anchor" href="#启用-init-d-支持" aria-hidden="true">#</a> 启用 init.d 支持</h3><p>在 <code>/etc/wsl.conf</code> 中加入:</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>[boot]\nsystemd=true\n</code></pre></div><h3 id="生成新的-rsa-密钥" tabindex="-1"><a class="header-anchor" href="#生成新的-rsa-密钥" aria-hidden="true">#</a> 生成新的 RSA 密钥</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;mister-hope@outlook.com&quot;</span>\n</code></pre></div><h3 id="使用-windows-代理" tabindex="-1"><a class="header-anchor" href="#使用-windows-代理" aria-hidden="true">#</a> 使用 Windows 代理</h3><p>可以在 <code>.bashrc</code> 中加入以下内容:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># add for proxy</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">hostIP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ip</span> route <span class="token operator">|</span> <span class="token function">grep</span> default <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $3}&#39;</span><span class="token variable">)</span></span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">socks5Port</span><span class="token operator">=</span><span class="token number">10810</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">httpPort</span><span class="token operator">=</span><span class="token number">10811</span>\n\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">proxy</span><span class="token operator">=</span><span class="token string">&#39;\n  export HTTPS_PROXY=&quot;socks5://${hostIP}:${socks5Port}&quot;;\n  export HTTP_PROXY=&quot;socks5://${hostIP}:${socks5Port}&quot;;\n  export ALL_PROXY=&quot;socks5://${hostIP}:${socks5Port}&quot;;\n  git config --global http.proxy &quot;socks5://${hostIP}:${socks5Port}&quot;;\n  git config --global https.proxy &quot;socks5://${hostIP}:${socks5Port}&quot;;\n  echo -e &quot;Acquire::http::Proxy \\&quot;socks5://${hostIP}:${socks5Port}\\&quot;; &quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;\n  echo -e &quot;Acquire::https::Proxy \\&quot;socks5://${hostIP}:${socks5Port}\\&quot;; &quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;\n  if [ -e &quot;~/.ssh/config&quot;]; then\n    sed -i &quot;s/^ProxyCommand \\/usr\\/bin\\/corkscrew .* %h %p$/ProxyCommand \\/usr\\/bin\\/corkscrew ${hostIP} ${httpPort} %h %p/g&quot; ~/.ssh/config;\n  else\n    echo &quot;Host github.com\n  User git\n  Port 22\n  Hostname github.com\n  IdentityFile &quot;~/.ssh/id_rsa&quot;\n  TCPKeepAlive yes\n  ProxyCommand /usr/bin/corkscrew ${hostIP} ${httpPort} %h %p\n\nHost ssh.github.com\n  User git\n  Port 443\n  Hostname ssh.github.com\n  IdentityFile &quot;~/.ssh/id_rsa&quot;\n  TCPKeepAlive yes\n  ProxyCommand /usr/bin/corkscrew ${hostIP} ${httpPort} %h %p\n&quot;\n&#39;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">unproxy</span><span class="token operator">=</span><span class="token string">&#39;\n  unset HTTPS_PROXY;\n  unset HTTP_PROXY;\n  unset ALL_PROXY;\n  git config --global --unset http.proxy;\n  git config --global --unset https.proxy;\n  sudo sed -i -e &#39;</span>/Acquire::http::Proxy/d<span class="token string">&#39; /etc/apt/apt.conf.d/proxy.conf;\n  sudo sed -i -e &#39;</span>/Acquire::https::Proxy/d<span class="token string">&#39; /etc/apt/apt.conf.d/proxy.conf;\n&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以快速地使用 proxy 和 unproxy 命令。</p><h3 id="安装-nvm-和-node-js" tabindex="-1"><a class="header-anchor" href="#安装-nvm-和-node-js" aria-hidden="true">#</a> 安装 nvm 和 Node.js</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span>\n</code></pre></div><ol><li><p>由于 GitHub 已经遭到封锁，可以考虑安装 V2Ray 给 WSL2 以获得推送代码的能力。</p></li><li><p>更改 Node.js 可以使用的 Old Space 大小:</p><p>在用户目录的 <code>.bashrc</code> 中加入:</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>export NODE_OPTIONS=&quot;--max-old-space-size=8192&quot;\n</code></pre></div></li></ol>',19)],o={},i=(0,e(11164).Z)(o,[["render",function(s,n){return(0,a.wg)(),(0,a.iD)("div",null,t)}]])},11164:(s,n)=>{n.Z=(s,n)=>{const e=s.__vccOpts||s;for(const[s,a]of n)e[s]=a;return e}},290:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a=JSON.parse('{"key":"v-65f8f243","path":"/note/wsl/","title":"WSL","lang":"zh-CN","frontmatter":{"title":"WSL","description":"目前使用的系统是 WSL2。 其中以下操作可能需要在新机器上进行相同操作: Windows 侧 Windows 侧可以在用户目录下创建 .wslconfig 文件，用于配置 WSL2。 WSL 侧 WSL 侧可以通过 /etc/wsl.conf 进行配置。 启用 init.d 支持 在 /etc/wsl.conf 中加入: 生成新的 RSA 密钥 使用...","head":[["meta",{"property":"og:url","content":"https://mrhope.site/note/wsl/"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"WSL"}],["meta",{"property":"og:description","content":"目前使用的系统是 WSL2。 其中以下操作可能需要在新机器上进行相同操作: Windows 侧 Windows 侧可以在用户目录下创建 .wslconfig 文件，用于配置 WSL2。 WSL 侧 WSL 侧可以通过 /etc/wsl.conf 进行配置。 启用 init.d 支持 在 /etc/wsl.conf 中加入: 生成新的 RSA 密钥 使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-06T14:18:22.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-12-06T14:18:22.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"Windows 侧","slug":"windows-侧","link":"#windows-侧","children":[]},{"level":2,"title":"WSL 侧","slug":"wsl-侧","link":"#wsl-侧","children":[{"level":3,"title":"启用 init.d 支持","slug":"启用-init-d-支持","link":"#启用-init-d-支持","children":[]},{"level":3,"title":"生成新的 RSA 密钥","slug":"生成新的-rsa-密钥","link":"#生成新的-rsa-密钥","children":[]},{"level":3,"title":"使用 Windows 代理","slug":"使用-windows-代理","link":"#使用-windows-代理","children":[]},{"level":3,"title":"安装 nvm 和 Node.js","slug":"安装-nvm-和-node-js","link":"#安装-nvm-和-node-js","children":[]}]}],"git":{"createdTime":1670336302000,"updatedTime":1670336302000,"contributors":[{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":1.37,"words":411},"autoDesc":true,"localizedDate":"2022年12月6日","filePathRelative":"note/wsl/README.md"}')}}]);