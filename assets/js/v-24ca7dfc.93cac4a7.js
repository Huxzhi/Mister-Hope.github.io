"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[88476],{53807:(e,l,a)=>{a.r(l),a.d(l,{default:()=>n});var t=a(16492);const i=[(0,t.uE)('<h1 id="ls" tabindex="-1"><a class="header-anchor" href="#ls" aria-hidden="true">#</a> ls</h1><p><code>ls</code> 命令用于列出当前目录里面的文件和子目录。</p><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><ul><li>a: 列出隐藏文件</li><li>l: 以长格式列出文件</li><li>t: 按最后编辑日期排序，最新的最先。这在某个大目录里找出最近修改的文件列表时很有用，比如将结果导入( pipe ) head 或者 sed 10q。或许加上 -l 会效果更好。当然如果您想获取最旧的文件列表，只要加 -r 反转列表即可。</li><li>X: 按文件类型分类。这在多语言或多后缀的项目中特别方便，比如头文件和源文件分开，或区分开源文件和生成文件或目录。</li><li>v: 按照文件名里的版本号排序。</li><li>S: 按文件大小排序。</li><li>R: 递归地列举文件。这个选项和 -l 组合使用并将结果导出到 less 效果很好。</li></ul><p>可以把结果导出给类似 vim 的进程。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-XR</span> <span class="token operator">|</span> <span class="token function">vim</span> -\n</code></pre></div>',6)],s={},n=(0,a(11164).Z)(s,[["render",function(e,l){return(0,t.wg)(),(0,t.iD)("div",null,i)}]])},11164:(e,l)=>{l.Z=(e,l)=>{const a=e.__vccOpts||e;for(const[e,t]of l)a[e]=t;return a}},73449:(e,l,a)=>{a.r(l),a.d(l,{data:()=>t});const t=JSON.parse('{"key":"v-24ca7dfc","path":"/linux/bash/archives/commands/ls.html","title":"ls","lang":"zh-CN","frontmatter":{"description":"ls ls 命令用于列出当前目录里面的文件和子目录。 参数 a: 列出隐藏文件 l: 以长格式列出文件 t: 按最后编辑日期排序，最新的最先。这在某个大目录里找出最近修改的文件列表时很有用，比如将结果导入( pipe ) head 或者 sed 10q。或许加上 -l 会效果更好。当然如果您想获取最旧的文件列表，只要加 -r 反转列表即可。 X: 按文件类型分类。这在多语言或多后缀的项目中特别方便，比如头文件和源文件分开，或区分开源文件和生成文件或目录。 v: 按照文件名里的版本号排序。 S: 按文件大小排序。 R: 递归地列举文件。这个选项和 -l 组合使用并将结果导出到 less 效果很好。","head":[["meta",{"property":"og:url","content":"https://mrhope.site/linux/bash/archives/commands/ls.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"ls"}],["meta",{"property":"og:description","content":"ls ls 命令用于列出当前目录里面的文件和子目录。 参数 a: 列出隐藏文件 l: 以长格式列出文件 t: 按最后编辑日期排序，最新的最先。这在某个大目录里找出最近修改的文件列表时很有用，比如将结果导入( pipe ) head 或者 sed 10q。或许加上 -l 会效果更好。当然如果您想获取最旧的文件列表，只要加 -r 反转列表即可。 X: 按文件类型分类。这在多语言或多后缀的项目中特别方便，比如头文件和源文件分开，或区分开源文件和生成文件或目录。 v: 按照文件名里的版本号排序。 S: 按文件大小排序。 R: 递归地列举文件。这个选项和 -l 组合使用并将结果导出到 less 效果很好。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2021-01-27T06:58:54.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2021-01-27T06:58:54.000Z"}]]},"excerpt":"<h1> ls</h1>\\n<p><code>ls</code> 命令用于列出当前目录里面的文件和子目录。</p>\\n<h2> 参数</h2>\\n<ul>\\n<li>a: 列出隐藏文件</li>\\n<li>l: 以长格式列出文件</li>\\n<li>t: 按最后编辑日期排序，最新的最先。这在某个大目录里找出最近修改的文件列表时很有用，比如将结果导入( pipe ) head 或者 sed 10q。或许加上 -l 会效果更好。当然如果您想获取最旧的文件列表，只要加 -r 反转列表即可。</li>\\n<li>X: 按文件类型分类。这在多语言或多后缀的项目中特别方便，比如头文件和源文件分开，或区分开源文件和生成文件或目录。</li>\\n<li>v: 按照文件名里的版本号排序。</li>\\n<li>S: 按文件大小排序。</li>\\n<li>R: 递归地列举文件。这个选项和 -l 组合使用并将结果导出到 less 效果很好。</li>\\n</ul>","headers":[{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1611730734000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":2}]},"readingTime":{"minutes":0.82,"words":245},"localizedDate":"2020年6月3日","filePathRelative":"linux/bash/archives/commands/ls.md","autoDesc":true}')}}]);